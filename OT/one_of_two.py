from json_utility import *
from crypto_utility import *
from mcl import Fr, G1
import sys
import os

class Client_1_Of_2:
    __GENERATOR = None
    __b = None
    __index = None
    __key = None

    def __init__(self, seed: bytes):
        self.__GENERATOR = G1.hashAndMapTo(seed)

    def transfer_init(self, index: int):
        self.__b = Fr.rnd()
        self.__index = index

    def get_B(self, A: G1):
        B = None

        if (self.__index == 0):
            B = self.__GENERATOR * self.__b
        elif (self.__index == 1):
            B = A + self.__GENERATOR * self.__b
        else:
            raise ValueError("Invalid index.")

        self.__key = hash_G1_to_bytes(A * self.__b)

        return B

    def receive_encryptions(self, encryption1, encryption2):
        encryption = None

        if (self.__index == 0):
            encryption = encryption1
        elif (self.__index == 1):
            encryption = encryption2
        else:
            raise ValueError("Invalid index.")

        return decrypt_message(encryption, self.__key)

class Server_1_Of_2:
    __GENERATOR = None
    __a = None
    __M_0 = None
    __M_1 = None

    def __init__(self, seed: bytes):
        self.__GENERATOR = G1.hashAndMapTo(seed)

    def transfer_init(self, M_0: bytes, M_1: bytes):
        self.__a = Fr.rnd()
        self.__M_0 = M_0
        self.__M_1 = M_1

    def get_A(self) -> G1:
        return self.__GENERATOR * self.__a

    def send_encryptions(self, B: G1):
        K_0 = hash_G1_to_bytes(B * self.__a)
        K_1 = hash_G1_to_bytes((B - self.__GENERATOR * self.__a) * self.__a)

        return (encrypt_message(self.__M_0, K_0), encrypt_message(self.__M_1, K_1))

if __name__ == "__main__":
    def path_to_file(directory, file_name):
        return os.path.join(os.getcwd(), directory, file_name)

    if (len(sys.argv) != 2):
        raise ValueError("Invalid number of args.")

    seed = b'seed'
    client_index = 1
    M = [b'Hello', b'There']

    path_to_A = path_to_file("data", "A.json")
    path_to_B = path_to_file("data", "B.json")
    path_to_encryptions = path_to_file("data", "encryptions.json")

    client = None
    server = None

    if (sys.argv[1] == "client"):
        client = Client_1_Of_2(seed)
    elif (sys.argv[1] == "server"):
        server = Server_1_Of_2(seed)
    elif (sys.argv[1] == "both"):
        client = Client_1_Of_2(seed)
        server = Server_1_Of_2(seed)
    else:
        raise ValueError("Invalid argument.")

    if (client):
        client.transfer_init(client_index)

    if (server):
        server.transfer_init(M[0], M[1])


    if (server):
        input("Server: Click enter to generate A by server.")

        A = server.get_A()
        save_to_json(path_to_A, A)

        print("Server: \"A\" file has been generated by server.")

    if (client):
        input("Client: \"A\" file is required. Click enter to process this file.")

        A = deserialize_G1(load_from_json(path_to_A))
        B = client.get_B(A)
        save_to_json(path_to_B, B)

        print("Client: Client generated \"B\" file.")

    if (server):
        input("Server: \"B\" file is required. Click enter to process this file.")
        B = deserialize_G1(load_from_json(path_to_B))
        encryption1, encryption2 = server.send_encryptions(B)
        save_to_json(path_to_encryptions, (encryption1, encryption2))

        print("Server: Server generated \"encrypted message\".")

    if (client):
        input("Client: \"encrypted message\" is required. Click enter to process this file.")
        encryptions = deserialize_ciphertexts(load_from_json(path_to_encryptions))
        encryption1, encryption2 = encryptions

        decryption = client.receive_encryptions(encryption1, encryption2)
        print(f"Client: message: \"{decryption}\".")